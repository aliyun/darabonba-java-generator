import Source;

model Config {
  protocol: string,
}
type @protocol = string
type @pathname = string
type @compleList = [[string]]

init(config: Config){
  @protocol = config.protocol;
}

model ComplexRequest = {
  accessKey: string,
  complexList: [[map[string]string]],
  body: readable(name='Body', example='Body', description='Body'),
  strs: [ string ](name='Strs', example='Strs', description='Strs'),
  header: {
    content: string(name='Content', example='Content', signed='true', description='Body')
  }(description='header', name='header'),
  num: number,
  client: Source,
  part?: [
    {
      partNumber?: string(description='PartNumber', name='PartNumber')
    }
  ](description='Part', name='Part'),
}

model Response {
  part: ComplexRequest.part,
  req: Source.Request,
}

function testSubModel(part: ComplexRequest.part, complexList: [[string]]): void {
 return;
}

async function hello(request: object, strs: [ string ]): [ string ] {
  return array1();
}

static async function print(reqeust: $Request, reqs: [ ComplexRequest ], response: $Response, val: map[string]string): Source.Request {}

api Complex1(request: ComplexRequest, client: Source): Source.RuntimeObject {
  var name = 'complex';
  var mapVal = {test="ok"};
  __request.protocol = @protocol;
  __request.port = request.num;
  __request.method = 'GET';
  __request.pathname = `/${@pathname}`;
  __request.query = {
    date = '2019',
  };
} returns {
  if (true && true){
    retry;
    return null;
  } else if(true || false){
    return new Source.RuntimeObject{};
  }
  client.print(request, '1');
  hello(request, ["1","2"]);
  hello(null, null);
  return {};
  Complex3(null);
} runtime {
  timeouted = 'retry'
} 

api Complex2(request: ComplexRequest, str: [ string ], val: map[string]string): object {
  var name = 'complex';
  var config = new Source.Config{};
  var client = new Source(config);
  __request.protocol = 'HTTP';
  __request.port = 80;
  __request.method = 'GET';
  __request.pathname = '/';
  __request.query = {
    date = '2019',
    protocol = __request.protocol,
  };
}

api Complex3(request: ComplexRequest): ComplexRequest {
  var name = 'complex';
  __request.protocol = templateString();
  __request.port = 80;
  __request.method = 'GET';
  __request.pathname = '/';
  __request.body = 'body';
  __request.query = {
    date = '2019',
  };
} returns {
  var resp = __response;
  var req = new Source.Request{
    accesskey = request.accessKey,
    region = resp.statusMessage
  };
  array0(request);
  req.accesskey = 'accesskey';
  req.accesskey = request.accessKey;
  printNull();
  Source.array(request, '1');
  return {
    ...__request.query
  };
}

static async function printNull(): void {
  var str = templateString();
}

static function array0(req: object): [ any ] {

  return [];
}

static function array1(): [ string ] {
  return ["1"];
}

async function templateString(): string {
  return `/${@protocol}`;
}
